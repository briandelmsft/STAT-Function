let user_ids = dynamic({user_id_list});
let selected_nodes = materialize (
ExposureGraphNodes
| where NodeLabel in~ ('user','group','device','microsoft.compute/virtualmachines'));
let selected_edges =
ExposureGraphEdges
| where EdgeLabel in~ ('can authenticate to', 'member of');
union
(selected_edges
| make-graph SourceNodeId --> TargetNodeId with selected_nodes on NodeId
| graph-match (user)-[edge*1..5]->(device)
 where user.EntityIds has_any (user_ids) 
 project User=tostring(coalesce(user.NodeProperties.rawData.accountUpn,user.NodeProperties.rawData.accountName,user.NodeProperties.rawData.distinguishedName,user.NodeProperties.rawData.accountDisplayName,user.NodeProperties.rawData.accountObjectId))
 ,UserCriticality=toint(coalesce(user.NodeProperties.rawData.criticalityLevel.criticalityLevel,dynamic(3)))
 ,UserCriticalityRules=user.NodeProperties.rawData.criticalityLevel.ruleNames
 ,UserTags=user.NodeProperties.rawData.tags
 ,UserEntityIds=user.EntityIds
 ,UserNodeId=user.NodeId
 ,Computer=device.NodeName
 ,ComputerCriticality=toint(coalesce(device.NodeProperties.rawData.criticalityLevel.criticalityLevel,dynamic(3)))
 ,ComputerCriticalityRules=device.NodeProperties.rawData.criticalityLevel.ruleNames
 ,EdgeLabel=edge.EdgeLabel
 ,EdgeProperties=edge.EdgeProperties
 ,Path=map(edge, TargetNodeName), user, device
| where EdgeLabel has 'can authenticate to'
| extend RightsOnDevice = EdgeProperties[-1].rawData.userRightsOnDevice
| extend isLocalAdmin = tobool(RightsOnDevice.isLocalAdmin)
| sort by UserCriticality asc, ComputerCriticality asc
| summarize ElevatedRightsOn=make_set(Computer, 5), ElevatedRightsOnCount=count_distinct(Computer), UserCriticality=min(UserCriticality), UserCriticalityRules=make_set(UserCriticalityRules), UserTags=make_set(UserTags), HighestComputerCriticality=min(ComputerCriticality), LocalAdminCount=dcountif(Computer, isLocalAdmin), ComputerCriticalityRules=make_set(ComputerCriticalityRules), UserEntityIds=make_set(UserEntityIds) by User, UserNodeId
| extend NodeType="Path"
),
(selected_nodes
| where EntityIds has_any (user_ids) 
| project User=tostring(coalesce(NodeProperties.rawData.accountUpn,NodeProperties.rawData.accountName,NodeProperties.rawData.distinguishedName,NodeProperties.rawData.accountDisplayName,NodeProperties.rawData.accountObjectId))
 ,UserCriticality=toint(coalesce(NodeProperties.rawData.criticalityLevel.criticalityLevel,dynamic(3)))
 ,UserCriticalityRules=NodeProperties.rawData.criticalityLevel.ruleNames
 ,UserTags=NodeProperties.rawData.tags
 ,UserEntityIds=EntityIds
 ,UserNodeId=NodeId
 ,NodeType="Node"
)