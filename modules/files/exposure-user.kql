let user_ids = dynamic({user_id_list});
let selected_nodes =
ExposureGraphNodes
| where NodeLabel in~ ('user','group','device','microsoft.compute/virtualmachines');
let selected_edges =
ExposureGraphEdges
| where EdgeLabel in~ ('can authenticate to', 'member of');
selected_edges
| make-graph SourceNodeId --> TargetNodeId with selected_nodes on NodeId
| graph-match (user)-[edge*1..5]->(device)
 where user.EntityIds has_any (user_ids) 
 project UPN=user.NodeProperties.rawData.accountUpn
 ,UserCriticality=coalesce(user.NodeProperties.rawData.criticalityLevel.criticalityLevel,dynamic(3))
 ,UserCriticalityRules=user.NodeProperties.rawData.criticalityLevel.ruleNames
 ,Computer=device.NodeName
 ,ComputerCriticality=coalesce(device.NodeProperties.rawData.criticalityLevel.criticalityLevel,dynamic(3))
 ,ComputerCriticalityRules=device.NodeProperties.rawData.criticalityLevel.ruleNames
 ,EdgeLabel=edge.EdgeLabel
 ,EdgeProperties=edge.EdgeProperties
 ,Path=map(edge, TargetNodeName), user, device
| where EdgeLabel has 'can authenticate to'
| extend RightsOnDevice = EdgeProperties[-1].rawData.userRightsOnDevice
| extend isLocalAdmin = tobool(RightsOnDevice.isLocalAdmin)
| summarize ElevatedRightsOn=make_set(Computer, 5), UserCriticality=min(toint(UserCriticality)), HighestComputerCriticality=min(toint(ComputerCriticality)), LocalAdminCount=countif(isLocalAdmin), ComputerCriticalityRules=make_set(ComputerCriticalityRules), UserCriticalityRules=make_set(UserCriticalityRules) by tostring(UPN)