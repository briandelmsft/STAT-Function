from classes import *
from shared import data, rest
import json, openai, os, logging

def execute_gpt_module (req_body):

    #Inputs BaseModuleBody, AddIncidentComments, AddIncidentTask, AIRequest, InputModule

    base_object = BaseModule()
    base_object.load_from_input(req_body['BaseModuleBody'])

    gpt_object = GPTModule()

    base_url = os.getenv('OPENAI_ENDPOINT')
    api_key = os.getenv('OPENAI_APIKEY')
    deploy_name = os.getenv('OPENAI_DEPLOYMENTNAME')

    ai_request = req_body.get('AIRequest', 'Please provide a summary of the incident and a list of recommended investigation actions.')

    if not base_url or not api_key or not deploy_name:
        raise STATError('Environment variables for OpenAI are not configured.  This module requires the OPENAI_ENDPOINT, OPENAI_APIKEY and OPENAI_DEPLOYMENTNAME environment variables to be set.')

    openai.api_type = 'azure'
    openai.api_base = f'https://{base_url}/'
    openai.api_key = api_key
    openai.api_version = "2023-05-15"

    #add_message(gpt_object, 'system', 'You are a helpful security analysis bot that utilizes Microsoft Security tools that will help respond to this security incident. You will be provided with information related to a specific incident in Microsoft Sentinel.')
    add_message(gpt_object, 'system', 'You are a helpful security analysis bot that utilizes Microsoft Security tools that will help respond to this security incident. You will be provided with information related to a specific incident in Microsoft Sentinel. When asked, respond exclusively in the following JSON format {"Summary": "", "Actions": [{"ActionName": "", "ActionDescription": ""}]}')

    base_module_messages(gpt_object, base_object)

    for input_module in req_body['ModuleData']:
        module_body = input_module['ModuleBody']
        module = module_body.get('ModuleName')
        ai_context = input_module.get('AIContext', module)

        match module:
            case 'RelatedAlerts':
                related_alerts_messages(gpt_object, module_body)
            case 'KQLModule':
                kql_messages(gpt_object, module_body, ai_context)
            case 'TIModule':
                ti_messages(gpt_object, module_body)
            case 'MDEModule':
                mde_messages(gpt_object, module_body)
            case 'ScoringModule':
                scoring_messages(gpt_object, module_body)
            case _:
                raise STATError(error=f'Module is not currently supported to pass to GPT: {module}.', status_code=400)

    add_message(gpt_object, 'user', ai_request)

    response = openai.ChatCompletion.create(engine=deploy_name, messages=gpt_object.Messages, temperature=0.1)
    gpt_object.Response = response['choices'][0]['message']['content'] 

    logging.info(f"Usage: Completion {response['usage']['completion_tokens']}, Prompt {response['usage']['prompt_tokens']}, Total {response['usage']['total_tokens']}, Response Time {response.response_ms}")

    if req_body.get('AddIncidentComments', True) and base_object.IncidentAvailable:
        comment = f'{gpt_object.Response}<br><p>'
        comment += f'-Generated by Azure OpenAI'
        comment_result = rest.add_incident_comment(base_object, comment)

    # if req_body.get('AddIncidentTask', False) and data.coalesce(aadrisks_object.FailedMFATotalCount,0) > 0 or data.coalesce(aadrisks_object.MFAFraudTotalCount,0) > 0 or data.coalesce(aadrisks_object.SuspiciousActivityReportTotalCount,0) > 0 or ( aadrisks_object.HighestRiskLevel != 'None' and aadrisks_object.HighestRiskLevel != 'Unknown'):
    #     task_result = rest.add_incident_task(base_object, req_body.get('QueryDescription', 'Review users Azure AD risks level, MFA failures and fraud reports.'), req_body.get('IncidentTaskInstructions'))

    return Response(gpt_object)

def add_message(gpt_object:GPTModule, msg_type:str, instruction:str, data_list:list=None):
    '''Adds a Message to array for GPT.  msg_type allowed values are (data, assistant, system and user)
    data is an assistant messages with a data list included
    '''
    if msg_type not in ('system', 'assistant', 'user', 'data'):
        raise STATError(f'Invalid message type: {msg_type}')

    if msg_type == 'data':
        gpt_object.Messages.append(
            {
                'role': 'assistant',
                'content': instruction + '\\n' + data.list_to_csv_table(data_list)
            })
    else:
        gpt_object.Messages.append(
            {
                'role': msg_type,
                'content': instruction
            })

def base_module_messages(gpt_object:GPTModule, base_object:BaseModule):
    add_message(gpt_object, 'assistant', f'The incident title is {base_object.Title}')
    add_message(gpt_object, 'assistant', f'The incident is severity {base_object.Severity}')

    if base_object.Description:
        add_message(gpt_object, 'assistant', f'The incident description is {base_object.Description}')

    if base_object.Accounts:
        account_info = data.select_columns(base_object.Accounts, ['userPrincipalName', 'state', 'country', 'department', 'jobTitle'])
        add_message(gpt_object, 'data', 'The impacted user is', account_info)

    if base_object.IPs:
         ip_info = data.select_columns(data.expand_column_containing_dict(base_object.IPs, 'GeoData'), ['Address', 'country', 'organization'])
         add_message(gpt_object, 'data', 'The impacted IP Address is', ip_info)

def kql_messages(gpt_object:GPTModule, module_body, ai_context):
    kql = KQLModule()
    kql.load_from_input(module_body)
    if kql.DetailedResults:
        add_message(gpt_object, 'data', ai_context, kql.DetailedResults)

def related_alerts_messages(gpt_object:GPTModule, module_body):
    alerts = RelatedAlertsModule()
    alerts.load_from_input(module_body)
    if alerts.DetailedResults:
        alert_data = data.select_columns(alerts.DetailedResults, ['DisplayName','AlertSeverity','ProviderName','AccountEntityMatch','IPEntityMatch','HostEntityMatch'])
        add_message(gpt_object, 'data', 'The following alerts were found and are related to the impacted user, ip or hosts in this incident', alert_data)
    else:
        add_message(gpt_object, 'assistant', 'There are no other alerts found related to this incident.')

def ti_messages(gpt_object:GPTModule, module_body):
    ti = TIModule()
    ti.load_from_input(module_body)

    if ti.AnyTIFound:
        ti_data = data.select_columns(ti.DetailedResults, ['TIData', 'SourceSystem', 'Description', 'ThreatType', 'ConfidenceScore'])
        add_message(gpt_object, 'data', 'The following threat intelligence indicators were found for this incident', ti_data)
    else:
        add_message(gpt_object, 'assistant', 'There is no threat intelligence data found related to this incident')

def mde_messages(gpt_object:GPTModule, module_body):
    mde = MDEModule()
    mde.load_from_input(module_body)

    if mde.DetailedResults.get('Accounts'):
        add_message(gpt_object, 'data', 'Device risk information related to impacted users', mde.DetailedResults['Accounts'])

    if mde.DetailedResults.get('Hosts'):
        add_message(gpt_object, 'data', 'Device risk information related to impacted devices', mde.DetailedResults['Hosts'])

    if mde.DetailedResults.get('IPs'):
        add_message(gpt_object, 'data', 'Device risk information related to impacted IP Addresses', mde.DetailedResults['Hosts'])

def scoring_messages(gpt_object:GPTModule, module_body):
    scoring = ScoringModule()
    scoring.load_from_input(module_body)

    if scoring.TotalScore >= 100:
        add_message(gpt_object, 'assistant', f'With a risk score of {scoring.TotalScore}, we have high confidence this incident is a true positive')
    elif scoring.TotalScore >= 30:
        add_message(gpt_object, 'assistant', f'With a risk score of {scoring.TotalScore}, we have moderate confidence in this incident being a true positive')
    else:
        add_message(gpt_object, 'assistant', f'With a risk score of {scoring.TotalScore}, we have low confidence in this incident, it may be false positive')
